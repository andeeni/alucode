/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alucombine_1 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg n,
    output reg z,
    output reg v
  );
  
  
  
  wire [16-1:0] M_addmul_out;
  wire [1-1:0] M_addmul_z;
  wire [1-1:0] M_addmul_v;
  wire [1-1:0] M_addmul_n;
  add_5 addmul (
    .a(a),
    .b(b),
    .alufn(alufn[0+5-:6]),
    .out(M_addmul_out),
    .z(M_addmul_z),
    .v(M_addmul_v),
    .n(M_addmul_n)
  );
  wire [16-1:0] M_bol_out;
  boolean_6 bol (
    .a(a),
    .b(b),
    .alufn(alufn[0+5-:6]),
    .out(M_bol_out)
  );
  wire [16-1:0] M_cmp_out;
  compare_7 cmp (
    .a(a),
    .b(b),
    .alufn(alufn[0+5-:6]),
    .out(M_cmp_out)
  );
  wire [16-1:0] M_shf_out;
  shifter_8 shf (
    .a(a),
    .b(b),
    .alufn(alufn[0+5-:6]),
    .out(M_shf_out)
  );
  
  always @* begin
    out = 1'h0;
    
    case (alufn[4+1-:2])
      1'h0: begin
        if (alufn[1+0-:1] == 1'h1) begin
          out = M_addmul_out;
          z = 1'h0;
          v = 1'h0;
          n = 1'h0;
        end else begin
          out = M_addmul_out;
          z = M_addmul_z;
          v = M_addmul_v;
          n = M_addmul_n;
        end
      end
      1'h1: begin
        out = M_bol_out;
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
      end
      2'h2: begin
        out = M_shf_out;
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
      end
      2'h3: begin
        out = M_cmp_out;
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
      end
      default: begin
        out = 1'h0;
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
      end
    endcase
  end
endmodule
